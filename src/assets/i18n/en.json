{
  "app": {
    "title": "gramoFO"
  },
  "model-checker": {
    "title": "ModelChecker"
  },
  "home": {
    "title": "Home",
    "saved-graphs": "Saved Graphs"
  },
  "graph": {
    "reset-graph": "Reset Layout",
    "create-node": "Create Node",
    "labels": "Labels",
    "simulation": "Simulation",
    "save-graph": "Save Graph"
  },
  "editor": {
    "node": {
      "title": "Node",
      "none-selected": "No Node selected."
    },
    "link": {
      "title": "Edge",
      "none-selected": "No Edge selected."
    },
    "symbols": {
      "new-relation": "New Relation",
      "new-function": "New Function",
      "new-constant": "New Constant"
    }
  },
  "actions": {
    "apply": "Apply",
    "delete": "Delete",
    "cancel": "Cancel",
    "save": "Save",
    "undo": "Undo",
    "export": "Export",
    "title": "Actions",
    "open": "Open",
    "check": "Check",
    "expand": "Expand",
    "collapse": "Collapse",
    "show-causes": "Show Causes"
  },
  "fol": {
    "relation": {
      "plural": "Relations"
    },
    "function": {
      "plural": "Functions"
    },
    "constant": {
      "plural": "Constants"
    },
    "formula": "Formula"
  },
  "lang": {
    "en": "English",
    "de": "German"
  },
  "dashboard": {
    "github-repository": "GitHub Repository"
  },
  "misc": {
    "name": "Name",
    "last-edit": "Last Edit",
    "description": "Description",
    "or": "or"
  },
  "snackbar": {
    "graph-deleted": "Graph \"{{name}}\" has been deleted."
  },
  "export": {
    "json": "JSON",
    "yaml": "YAML",
    "copy": "Copy Graph to clipboard",
    "download": "Download Graph as file",
    "copy-failure": "Could not copy Graph to clipboard.",
    "copy-success": "Graph has been copied to the clipboard."
  },
  "validation": {
    "node": {
      "missing": "Invalid Graph: Node \"{{node}}\" is missing from the Graph.",
      "duplicate": "Invalid Graph: Duplicate Node \"{{node}}\".",
      "invalid-relations": "Invalid Graph: Node \"{{node}}\" has invalid relation(s) (Relations must begin with an uppercase letter).",
      "invalid-constants": "Invalid Graph: Node \"{{node}}\" has invalid constant(s) (Constants must begin with a lowercase letter)."
    },
    "edge": {
      "missing": "Invalid Graph: Edge from \"{{source}}\" to \"{{target}}\" is missing from the Graph.",
      "invalid-relations": "Invalid Graph: Edge from \"{{source}}\" to \"{{target}}\" has invalid relation(s) (Relations must begin with an uppercase letter).",
      "invalid-functions": "Invalid Graph: Edge from \"{{source}}\" to \"{{target}}\" has invalid function(s) (Functions must begin with a lowercase letter)."
    },
    "parse-error": "Input does not match the Graph schema."
  },
  "import": {
    "format-hint": "JSON or YAML",
    "title": "Import Graph",
    "file": "Import File",
    "file-error": "Could not import File.",
    "load-demo": "Load Demo Graph",
    "text": "Paste or edit Graph"
  },
  "api": {
    "valid": "The graph is a model of the formula: {{formula}}",
    "invalid": "The graph is not a model of the formula: {{formula}}",
    "forall": {
      "valid": "Subformula holds for all variable assignments",
      "invalid": "Subformula does not hold for some variable assignments"
    },
    "exists": {
      "valid": "Subformula holds for some variable assignments",
      "invalid": "Subformula holds for no variable assignments"
    },
    "not": {
      "valid": "Proposition does not hold",
      "invalid": "Proposition holds"
    },
    "and": {
      "both": "Both conjuncts hold",
      "neither": "Neither conjunct holds",
      "left": "First conjunct does not hold",
      "right": "Second conjunct does not hold"
    },
    "or": {
      "both": "Both disjuncts hold",
      "neither": "Neither disjunct holds",
      "left": "First disjunct holds",
      "right": "Second disjunct holds"
    },
    "implication": {
      "right": "Consequent holds",
      "left": "Antecedent does not hold",
      "invalid": "Antecedent holds but consequent does not"
    },
    "bi-implication": {
      "valid": "Antecedent holds if and only if consequent holds",
      "invalid": "Antecedent does not hold if and only if consequent holds"
    },
    "relation": {
      "unary": {
        "valid": "{{node}} ∈ {{relation}}",
        "invalid": "{{node}} ∉ {{relation}}"
      },
      "equality": {
        "valid": "{{firstTerm}} = {{firstResult}} = {{secondTerm}}",
        "invalid": "{{firstTerm}} = {{firstResult}} ≠ {{secondResult}} = {{secondTerm}}"
      },
      "binary": {
        "valid": "({{firstResult}}, {{secondResult}}) ∈ {{relation}}",
        "invalid": "({{firstResult}}, {{secondResult}}) ∉ {{relation}}"
      }
    },
    "constant": {
      "true": "Constant is true",
      "false": "Constant is false"
    }
  }
}
